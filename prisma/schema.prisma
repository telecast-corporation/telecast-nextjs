generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String            @id @default(cuid())
  email              String?           @unique
  name               String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  image              String?
  password           String?
  emailVerified      Boolean?          @default(false)
  verifyToken        String?           @unique
  verifyTokenExpires DateTime?
  accounts           Account[]
  podcasts           Podcast[]
  telecastPodcasts   TelecastPodcast[]
  sessions           Session[]
  recordings         Recording[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  @@index([email])
  @@index([token])
}

model Podcast {
  id          String    @id @default(cuid())
  title       String
  description String?
  imageUrl    String
  userId      String
  author      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  episodes    Episode[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  published   Boolean   @default(false)
  tags        String[]
  category    String
  views       Int       @default(0)
  likes       Int       @default(0)
  language    String    @default("en")
  explicit    Boolean   @default(false)
  copyright   String?
  ownerName   String?
  ownerEmail  String?
  website     String?
  rssFeed     String?

  @@index([userId])
  @@index([title])
  @@index([category])
  @@index([tags])
}

model Episode {
  id            String   @id @default(cuid())
  title         String
  description   String
  audioUrl      String
  duration      Int
  publishDate   DateTime @default(now())
  podcastId     String
  episodeNumber Int?
  seasonNumber  Int?
  explicit      Boolean  @default(false)
  keywords      String[]
  views         Int      @default(0)
  likes         Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  podcast       Podcast  @relation(fields: [podcastId], references: [id], onDelete: Cascade)

  @@index([podcastId])
  @@index([title])
  @@index([publishDate])
}

model TelecastPodcast {
  id                 String    @id @default(cuid())
  title              String
  description        String
  author             String
  language           String    @default("en")
  category           String
  explicit           Boolean   @default(false)
  episodeTitle       String
  episodeDescription String
  episodeType        String    @default("full")
  episodeNumber      String?
  pubDate            DateTime  @default(now())
  audioFileName      String
  audioFileSize      Int
  audioFileType      String
  audioFileData      String // Base64 encoded audio data
  userId             String
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  published          Boolean   @default(false)
  publishedAt        DateTime?
  views              Int       @default(0)
  likes              Int       @default(0)

  @@index([userId])
  @@index([title])
  @@index([category])
  @@index([published])
  @@index([createdAt])
}

model Recording {
  id          String   @id @default(cuid())
  title       String
  description String
  audioUrl    String
  duration    Int      @default(0)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  isPublic    Boolean  @default(false)
  views       Int      @default(0)
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
