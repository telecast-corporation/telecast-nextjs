generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(cuid())
  email            String?         @unique
  name             String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  image            String?
  rssFeed          String?
  isPremium        Boolean         @default(false)
  premiumExpiresAt DateTime?
  usedFreeTrial    Boolean         @default(false)
  auth0Id          String?         @unique
  fileReferences   FileReference[]
  podcasts         Podcast[]
  recordings       Recording[]
  platformConnections PlatformConnection[]
}

model Podcast {
  id             String          @id @default(cuid())
  title          String
  description    String?
  userId         String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  published      Boolean         @default(false)
  tags           String[]
  category       String
  language       String          @default("en")
  explicit       Boolean         @default(false)
  copyright      String?
  website        String?
  author         String
  coverImage     String?
  isPublic       Boolean         @default(false)
  rssFeed        String?
  episodes       Episode[]
  fileReferences FileReference[]
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([title])
  @@index([category])
  @@index([tags])
}

model Episode {
  id            String    @id @default(cuid())
  title         String
  description   String?
  podcastId     String
  audioUrl      String?
  duration      Int?
  fileSize      Int?
  publishedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  episodeNumber Int?
  seasonNumber  Int?
  explicit      Boolean   @default(false)
  keywords      String[]
  views         Int       @default(0)
  likes         Int       @default(0)
  referenceId   String?
  podcast       Podcast   @relation(fields: [podcastId], references: [id], onDelete: Cascade)

  @@index([podcastId])
  @@index([title])
}

model Recording {
  id          String   @id @default(cuid())
  title       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  isPublic    Boolean  @default(false)
  views       Int      @default(0)
  description String
  tags        String[]
  audioUrl    String
  duration    Int      @default(0)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FileReference {
  id          String   @id @default(cuid())
  referenceId String   @unique
  podcastId   String
  userId      String
  status      String   @default("temp")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  podcast     Podcast  @relation(fields: [podcastId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([referenceId])
  @@index([userId])
  @@index([podcastId])
}

model PlatformConnection {
  id           String    @id @default(cuid())
  userId       String
  platform     String    // 'spotify', 'apple', 'google'
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, platform])
  @@index([userId])
  @@index([platform])
}
